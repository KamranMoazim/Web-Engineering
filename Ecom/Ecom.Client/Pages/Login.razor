@page "/login"
@inject IAuthService AuthService;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">

    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" type="email" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="user.Password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @* <ValidationSummary /> *@

    <div class="@messageCssClass">
        <span>@message</span>
    </div>

</EditForm>


@code {
    UserLogin user = new UserLogin();

    public string message { get; set; } = "";
    public string messageCssClass { get; set; } = "";

    private string returnUrl = "";

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var _returnUrl))
        {
            returnUrl = _returnUrl.First();
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        message = result.Message;
        if (result.Success)
        {
            message = "Login successful";
            messageCssClass = "text-success";
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            message = result.Message;
            messageCssClass = "text-danger";
        }
    }
}