@page "/product/{id:int}"
@inject IProductService ProductService;
@inject ICartService CartService;

<PageTitle>My Shop</PageTitle>

<h3>Product Details</h3>

@if (product == null)
{
    <p>@message</p>
}
else
{
    <div class="media">
    <div class="media-img-wrapper mr-2">
        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
    </div>
    <div class="media-body">
        <h2 class="mb-0">@product.Title</h2>
        <p>@product.Description</p>

        @if (product.ProductVariants != null && product.ProductVariants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-control" @bind="currentTypeId">
                        @foreach (var variant in product.ProductVariants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }

            @if (GetSelectedProductVariant() != null)
            {
                @if (GetSelectedProductVariant().OriginalPrice > GetSelectedProductVariant().Price)
                {
                    <h4 class="text-muted original-price">
                        $@GetSelectedProductVariant().OriginalPrice
                    </h4>
                }
                <h4 class="price">
            $@GetSelectedProductVariant().Price
        </h4>
            }
            <button class="btn btn-primary" @onclick=AddToCart>
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add To Cart
            </button>
        </div>
    </div>
}




@code {

    public Product product { get; set; } = null;
    public string message { get; set; } = string.Empty;
    private int currentTypeId = 1;


    [Parameter]
    public int Id { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        message = $"Loading Product ";
        var response = await ProductService.GetProduct(Id);

        if (response.Success)
        {
            product = response.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }
        else
        {
            message = response.Message;
        }
    }

    private ProductVariant GetSelectedProductVariant()
    {
        var variant = product.ProductVariants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedProductVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
        await CartService.AddToCart(cartItem);
    }

}
