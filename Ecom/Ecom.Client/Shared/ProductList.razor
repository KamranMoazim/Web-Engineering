@inject IProductService ProductService;
@implements IDisposable

<h1>ProductLists</h1>

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <p><em> @ProductService.Message </em></p>
}
else
{
    <ul>
    @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                        }
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @* @GetPriceText(product) *@
                    </h5>
                </div>
            </li>
        }
    </ul>

    @for (int i = 1; i <= ProductService.PageCount; i++)
    {
        @if (i == ProductService.CurrentPage)
        {
            <a class="btn btn-info page-selection" href="/search/@ProductService.LastSearchText/@i">@i</a>
        }
        else
        {
            <a class="btn btn-outline-info page-selection" href="/search/@ProductService.LastSearchText/@i">@i</a>
        }

    }
}

@code {
    protected override void OnInitialized()
    {
        Console.WriteLine("Here I am ProductList.razor - OnInitialized");
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        Console.WriteLine("Here I am ProductList.razor - Dispose");
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
